import telebot
from telebot import types
import sqlite3
from datetime import date, timedelta
from datetime import datetime
import matplotlib
import emoji
from emoji import emojize
import requests

matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np

today = date.today()
yesterday = today - timedelta(days=1)
week = today - timedelta(days=7)
smile = emojize('üòä', use_aliases=True)

bot = telebot.TeleBot("2013562061:AAGi4Dwq_wZwiFzhcqG9tnwUh0kmo6RHRuM")
token = "2013562061:AAGi4Dwq_wZwiFzhcqG9tnwUh0kmo6RHRuM"

# –Ω–∞–ø–∏—à–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–∞—à–µ–º—É –±–æ—Ç—É –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def send_keyboard(message, text="–ü—Ä–∏–≤–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∂–∏–∑–Ω—å. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?"):
    keyboard = types.ReplyKeyboardMarkup(row_width=2)  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    itembtn1 = types.KeyboardButton('–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã')
    itembtn2 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç')
    itembtn3 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã')
    itembtn4 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
    itembtn5 = types.KeyboardButton('–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ç')
    itembtn6 = types.KeyboardButton('–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª —Å —Ç—Ä–∞—Ç–∞–º–∏')
    itembtn7 = types.KeyboardButton('–û—Ç–¥—ã—Ö–∞–µ–º!')
    keyboard.add(itembtn1, itembtn2)  # 1 –∏ 2 –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä—è–¥
    keyboard.add(itembtn3, itembtn4, itembtn5, itembtn6, itembtn7)

    # –ø—Ä–∏—à–ª–µ–º —ç—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∑–∞–ø–∏—à–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    msg = bot.send_message(message.from_user.id,
                           text=text, reply_markup=keyboard)

    # –æ—Ç–ø—Ä–∞–≤–∏–º —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
    bot.register_next_step_handler(msg, callback_worker)


conn = sqlite3.connect('expenses_hse.db')

# –∫—É—Ä—Å–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
cursor = conn.cursor()

try:
    # sql –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("""CREATE TABLE IF NOT EXISTS expenses(
       ID INTEGER UNIQUE PRIMARY KEY, user_id INTEGER, expense TEXT,expense_dt DATE,amount REAL);""")
except:
    pass


# —Ñ—É–Ω–∫—Ü–∏–∏
# –†–∞—Å—Ö–æ–¥—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
def add_expense(msg):
    with sqlite3.connect('expenses_hse.db') as conn:
        cursor = conn.cursor()
        text_from_user = str(msg.text)
        dt_from_user = text_from_user.split(' ')[0]

        if len(dt_from_user) == 5 and dt_from_user[2] == '.':
            dt_in = int(dt_from_user[:2])
            month_in = int(dt_from_user[4:5])
            if dt_in > 31 or month_in > 12:
                bot.send_message(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')
            else:
                dt_parts = dt_from_user.split('.')
                dt = datetime.strptime('-'.join(['2021', dt_parts[1], dt_parts[0]]), '%Y-%m-%d').date()
        elif dt_from_user.lower() == '—Å–µ–≥–æ–¥–Ω—è':
            dt = datetime.strptime(dt_from_user.lower().replace('—Å–µ–≥–æ–¥–Ω—è', str(today)), '%Y-%m-%d').date()
        elif dt_from_user.lower() == '–≤—á–µ—Ä–∞':
            dt = datetime.strptime(dt_from_user.lower().replace('–≤—á–µ—Ä–∞', str(today - timedelta(days=1))),
                                   '%Y-%m-%d').date()
        else:
            bot.send_message(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')

        expense_txt = text_from_user.split(' ')[1]
        expense_amt = text_from_user.split(' ')[2]
        cursor.execute('INSERT INTO expenses (user_id, expense_dt, expense, amount) VALUES (?, ?, ?, ?)',
                       (msg.from_user.id, dt, expense_txt, expense_amt))
        conn.commit()
    bot.send_message(msg.chat.id, '–ó–∞–ø–∏—Å–∞–Ω–æ!')
    send_keyboard(msg, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?")


# —Ñ—É–Ω–∫—Ü–∏—è, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é expense, amt
def get_expenses_string(expenses):
    expenses_str = []
    for val in list(enumerate(expenses)):
        expenses_str.append(str(val[0] + 1) + '. ' + val[1][0] + ' ' + str(val[1][1]) + '\n')
    return ''.join(expenses_str)


# —Ñ—É–Ω–∫—Ü–∏—è, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é dt, expense, amt
def get_full_expenses(expenses):
    expenses_str = []
    for val in list(enumerate(expenses)):
        expenses_str.append(str(val[0] + 1) + ' ' + val[1][0] + ' ' + str(val[1][1]) + ' ' + str(val[1][2]) + '\n')
    return ''.join(expenses_str)


# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
def show_expenses(msg):
    with sqlite3.connect('expenses_hse.db') as con:
        cursor = con.cursor()

        text_from_user = str(msg.text)
        dt_from_user = text_from_user.split(' ')[0]

        if dt_from_user.lower() == '—Å–µ–≥–æ–¥–Ω—è':
            dt = datetime.strptime(dt_from_user.lower().replace('—Å–µ–≥–æ–¥–Ω—è', str(today)), '%Y-%m-%d').date()
        elif dt_from_user.lower() == '–≤—á–µ—Ä–∞':
            dt = datetime.strptime(dt_from_user.lower().replace('–≤—á–µ—Ä–∞', str(today - timedelta(days=1))),
                                   '%Y-%m-%d').date()
        elif len(dt_from_user) == 5 and dt_from_user[2] == '.':
            dt_parts = dt_from_user.split('.')
            dt = datetime.strptime('-'.join(['2021', dt_parts[1], dt_parts[0]]), '%Y-%m-%d').date()
        else:
            return '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã'

        cursor.execute("""SELECT 
                        expense, amount
                        FROM expenses 
                        WHERE user_id==? and expense_dt==?""", (msg.from_user.id, dt))
        expenses = get_expenses_string(cursor.fetchall())
        if len(expenses) == 0:
            bot.send_message(msg.chat.id, '–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –í–∞–∂–Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –≤–Ω–æ—Å–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã')
        else:
            bot.send_message(msg.chat.id, expenses) # TODO: new phrase


# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
def show_expenses_today(msg):
    with sqlite3.connect('expenses_hse.db') as con:
        cursor = con.cursor()
        cursor.execute("""SELECT 
                                expense, amount
                                FROM expenses 
                                WHERE user_id==? and expense_dt==?""",
                       (msg.from_user.id, today))  # TODO show sum for day
        expenses = get_expenses_string(cursor.fetchall())
        if len(expenses) == 0:
            bot.send_message(msg.chat.id, '–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –í–∞–∂–Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –≤–Ω–æ—Å–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã')
        else:
            bot.send_message(msg.chat.id, expenses)
            send_keyboard(msg, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?")

# –≤—ã—ã–¥–µ–ª—è–µ—Ç –æ–¥–Ω–æ –¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–¥–∞–ª–∏—Ç—å
def choose_expense_to_delete(msg):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with sqlite3.connect('expenses_hse.db') as con:
        cursor = con.cursor()

        text_from_user = str(msg.text)
        dt_from_user = text_from_user.split(' ')[0]

        global dt_delete
        if dt_from_user == '–°–µ–≥–æ–¥–Ω—è':
            dt_delete = datetime.strptime(dt_from_user.replace('–°–µ–≥–æ–¥–Ω—è', str(today)), '%Y-%m-%d').date()
        elif dt_from_user == '–í—á–µ—Ä–∞':
            dt_delete = datetime.strptime(dt_from_user.replace('–í—á–µ—Ä–∞', str(today - timedelta(days=1))),
                                          '%Y-%m-%d').date()
        elif len(dt_from_user) == 5 and dt_from_user[2] == '.':
            dt_parts = dt_from_user.split('.')
            dt_delete = datetime.strptime('-'.join(['2021', dt_parts[1], dt_parts[0]]), '%Y-%m-%d').date()
        else:
            return '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã'

        # –¥–æ—Å—Ç–∞–µ–º –≤—Å–µ —Ç—Ä–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""SELECT 
                                expense_dt, expense, amount
                                        FROM expenses 
                                        WHERE user_id==? and expense_dt==?""",
                       (msg.from_user.id, dt_delete))
        expenses = cursor.fetchall()

        for val in expenses:
            markup.add(types.KeyboardButton(val[1] + ' ' + str(val[2])))
        msg = bot.send_message(msg.from_user.id,
                               text="–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É —Ç—Ä–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞",
                               reply_markup=markup)
        bot.register_next_step_handler(msg, delete_expense) # TODO –¥–æ–±–∞–≤–∏—Ç—å - –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è—Ç—å

def delete_expense(msg):
    with sqlite3.connect('expenses_hse.db') as con:
        cursor = con.cursor()
        cursor.execute('DELETE FROM expenses WHERE user_id==? AND expense==? and expense_dt ==? and amount==?',
                       (msg.from_user.id, msg.text.split(' ')[0], dt_delete, msg.text.split(' ')[1]))
        bot.send_message(msg.chat.id, '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç—Ä–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞')
        send_keyboard(msg, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?")


# –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
def get_expenses_for_plt(expenses):
    values = []
    exp_dt = []
    for val in expenses:
        values.append(str(val[1]))
        exp_dt.append(str(val[0]))
    return ' '.join(values), ' '.join(exp_dt)


# –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ç
def send_plot(msg):
    with sqlite3.connect('expenses_hse.db') as con:
        cursor = con.cursor()
        cursor.execute("""select strftime('%d', expense_dt)||'.'||strftime('%m', expense_dt) as mnth, sum(amount)
                                from expenses
                               WHERE user_id==? and expense_dt between ? and ? group by mnth""",
                       (msg.from_user.id, week, today))
        expenses, expenses_dt = get_expenses_for_plt(cursor.fetchall())

        x = list(expenses_dt.split(' '))
        y = list(map(float, expenses.split(' ')))

        plt.title('–¢—Ä–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é')
        plt.xlabel('–î–Ω–∏ —Ç—Ä–∞—Ç')
        plt.ylabel('–°—É–º–º–∞ –∑–∞ –¥–µ–Ω—å')
        plt.bar(x, y)

        plt.savefig('expenses_by_week_plot.png', dpi=300)
        bot.send_photo(msg.chat.id, photo=open('expenses_by_week_plot.png', 'rb'))
        send_keyboard(msg, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?")

def send_file(msg):
    with sqlite3.connect('expenses_hse.db') as con:
        cursor = con.cursor()
        sql = """insert into expenses (user_id, expense, expense_dt, amount)
                    values(?, ?, ?, ?)"""
        try:
            file_id_info = bot.get_file(msg.document.file_id)
            downloaded_file = bot.download_file(file_id_info.file_path)

            text = downloaded_file.decode('utf-8')
            text = text.split('\n')

            file_lines = []
            for r in text:
                #r = r.replace('\n', '')
                if len(r) > 14:
                    file_lines.append(r.split(' '))

            for line in file_lines:
                cursor.execute(sql, (msg.from_user.id, line[1], line[0], line[2]))
        except:
            bot.send_message(msg.chat.id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")

        bot.send_message(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç–∏–∫–∏. –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")

def send_sticker(msg):
    bot.send_message(msg.chat.id, smile)

# –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –∫–Ω–æ–ø–∫–∞–º –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
def callback_worker(call):
    if call.text == "–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã":
        try:
            msg = bot.send_message(call.chat.id, '–í–≤–µ–¥–∏ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –°–µ–≥–æ–¥–Ω—è, –í—á–µ—Ä–∞ –∏–ª–∏ –¥–¥.–º–º, –ø–æ–∑–∏—Ü–∏—è, —Å—É–º–º–∞')
            bot.register_next_step_handler(msg, add_expense)
        except:
            bot.send_message(call.chat.id, 'wrong format')

    elif call.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç":
        try:
            msg = bot.send_message(call.chat.id, '–í–≤–µ–¥–∏ –¥–∞—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –ø–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ç—ã: –°–µ–≥–æ–¥–Ω—è, –í—á–µ—Ä–∞ –∏–ª–∏ –¥–¥.–º–º')
            bot.register_next_step_handler(msg, show_expenses)
        except:
            bot.send_message(call.chat.id, '–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –û—á–µ–Ω—å –≤–∞–∂–Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –≤–Ω–æ—Å–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã')
            send_keyboard(call, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?")

    elif call.text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è":
        try:
            show_expenses_today(call)
        except:
            bot.send_message(call.chat.id, '–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –û—á–µ–Ω—å –≤–∞–∂–Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã')
            send_keyboard(call, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?")

    elif call.text == "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã":
        try:
            msg = bot.send_message(call.chat.id, '–í–≤–µ–¥–∏ –¥–∞—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –ø–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞—Ç—ã: –°–µ–≥–æ–¥–Ω—è, –í—á–µ—Ä–∞ –∏–ª–∏ –¥–¥.–º–º')
            bot.register_next_step_handler(msg, choose_expense_to_delete)
        except:
            bot.send_message(call.chat.id, '–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ —Ç—Ä–∞—Ç')
            send_keyboard(call, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?")

    elif call.text == "–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ç":
        try:
            send_plot(call)
        except:
            bot.send_message(call.chat.id, '–ù–µ—Ç —Ç—Ä–∞—Ç –∑–∞ –Ω–µ–¥–µ–ª—é')
            send_keyboard(call, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?")

    elif call.text == "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª —Å —Ç—Ä–∞—Ç–∞–º–∏":
        try:
            msg = bot.send_message(call.chat.id, '–ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞, —Å—É–º–º–∞')
            bot.register_next_step_handler(msg, send_file)
        except:
            bot.send_message(call.chat.id, "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è")
            send_keyboard(call, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?")

    elif call.text == "–û—Ç–¥—ã—Ö–∞–µ–º!":
        try:
            send_sticker(call)
        except:
            bot.send_message(call.chat.id, '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ :)')


bot.polling(none_stop=True)